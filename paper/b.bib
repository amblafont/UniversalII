@article{chapman09eatitself,
    author = {James Chapman},
    title = {Type Theory Should Eat Itself},
    journal = {Electronic Notes in Theoretical Computer Science},
    issue_date = {January, 2009},
    volume = {228},
    month = jan,
    year = {2009},
    issn = {1571-0661},
    pages = {21--36},
    numpages = {16},
    url = {http://dx.doi.org/10.1016/j.entcs.2008.12.114},
    doi = {10.1016/j.entcs.2008.12.114},
    acmid = {1496402},
    publisher = {Elsevier Science Publishers B. V.},
    address = {Amsterdam, The Netherlands, The Netherlands},
    keywords = {Agda, big-step normalisation, explicit substitutions, type theory, typed syntax}}
@inproceedings{ttintt,
  author    = {Thorsten Altenkirch and
               Ambrus Kaposi},
  title     = {Type theory in type theory using quotient inductive types},
  booktitle = {Proceedings of the 43rd Annual {ACM} {SIGPLAN-SIGACT} Symposium on
               Principles of Programming Languages, {POPL} 2016, St. Petersburg,
               FL, USA, January 20 - 22, 2016},
  pages     = {18--29},
  year      = {2016},
  crossref  = {DBLP:conf/popl/2016},
  url       = {http://doi.acm.org/10.1145/2837614.2837638},
  doi       = {10.1145/2837614.2837638},
  timestamp = {Fri, 08 Jan 2016 18:18:25 +0100},
  biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/popl/AltenkirchK16},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
@proceedings{DBLP:conf/popl/2016,
  editor    = {Rastislav Bodik and
               Rupak Majumdar},
  title     = {Proceedings of the 43rd Annual {ACM} {SIGPLAN-SIGACT} Symposium on
               Principles of Programming Languages, {POPL} 2016, St. Petersburg,
               FL, USA, January 20 - 22, 2016},
  publisher = {{ACM}},
  year      = {2016},
  url       = {http://dl.acm.org/citation.cfm?id=2837614},
  isbn      = {978-1-4503-3549-2},
  timestamp = {Fri, 08 Jan 2016 18:18:25 +0100},
  biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/popl/2016},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
@book{streichersemantics,
 author = {Streicher, Thomas},
 title = {Semantics of Type Theory: Correctness, Completeness, and Independence Results},
 year = {1991},
 isbn = {0-8176-3594-7},
 publisher = {Birkhauser Boston Inc.},
 address = {Cambridge, MA, USA},
}
@article{Kaposi:2019:CQI:3302515.3290315,
 author = {Kaposi, Ambrus and Kov\'{a}cs, Andr\'{a}s and Altenkirch, Thorsten},
 title = {Constructing Quotient Inductive-inductive Types},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {January 2019},
 volume = {3},
 number = {POPL},
 month = jan,
 year = {2019},
 issn = {2475-1421},
 pages = {2:1--2:24},
 articleno = {2},
 numpages = {24},
 doi = {10.1145/3290315},
 acmid = {3290315},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {category with families, generalised algebraic theory, higher inductive types, homotopy type theory, inductive-inductive types, logical relations, quotient inductive types},
}
@PHDTHESIS{forsberg-phd,
  author = {Nordvall Forsberg, Fredrik},
  title = {Inductive-inductive definitions},
  school = {Swansea University},
  year = {2013}}
@InProceedings{jasper,
author="Hugunin, Jasper",
editor="Boja{\'{n}}czyk, Miko{\l}aj
and Simpson, Alex",
title="Constructing Inductive-Inductive Types in Cubical Type Theory",
booktitle="Foundations of Software Science and Computation Structures",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="295--312",
abstract="Inductive-inductive types are a joint generalization of mutual inductive types and indexed inductive types. In extensional type theory, inductive-inductive types can be constructed from inductive types, and this construction has been conjectured to work in intensional type theory as well. In this paper, we show that the existing construction requires Uniqueness of Identity Proofs, and present a new construction (which we conjecture generalizes) of one particular inductive-inductive type in cubical type theory, which is compatible with homotopy type theory.",
isbn="978-3-030-17127-8"
}
@InProceedings{kaposi_et_al:LIPIcs:2018:9190,
  author =	{Ambrus Kaposi and Andr{\'a}s Kov{\'a}cs},
  title =	{{A Syntax for Higher Inductive-Inductive Types}},
  booktitle =	{3rd International Conference on Formal Structures for  Computation and Deduction (FSCD 2018)},
  pages =	{20:1--20:18},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-077-4},
  ISSN =	{1868-8969},
  year =	{2018},
  volume =	{108},
  editor =	{H{\'e}l{\`e}ne Kirchner},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2018/9190},
  URN =		{urn:nbn:de:0030-drops-91906},
  doi =		{10.4230/LIPIcs.FSCD.2018.20},
  annote =	{Keywords: homotopy type theory, inductive-inductive types, higher inductive types, quotient inductive types, logical relations}
}


@book{hofmann95extensional,
  title={Extensional concepts in intensional type theory},
  author={Martin Hofmann},
  series={Thesis},
  year={1995},
  publisher={University of Edinburgh, Department of Computer Science}
}

@inproceedings{winterhalter2019eliminating,
  title={Eliminating reflection from type theory},
  author={Winterhalter, Th{\'e}o and Sozeau, Matthieu and Tabareau, Nicolas},
  booktitle={Proceedings of the 8th ACM SIGPLAN International Conference on Certified Programs and Proofs},
  pages={91--103},
  year={2019},
  organization={ACM}
}
@phdthesis{norell07thesis,
    author = {Ulf Norell},
    title = {Towards a practical programming language based on dependent type theory},
    school = {Chalmers University of Technology},
    year = {2007}}

@techreport{HoTTbook,
        Author = {The Univalent Foundations Program},
        Institution = {Institute for Advanced Study},
        Title = {Homotopy type theory: Univalent foundations of mathematics},
        Year = {2013}}
@INPROCEEDINGS{cockxsprinkles,
    title = {Sprinkles of extensionality for your vanilla type theory},
    author = {Cockx, Jesper and Abel, Andreas},
    year = {2016},
    booktitle = {22nd International Conference on Types for Proofs and Programs, TYPES 2016},
    editor = {Ghilezan, Silvia and IvetiÄ‡ Jelena},
    publisher = {University of Novi Sad},
    comment = {Abstract}
}

@INPROCEEDINGS{Dybjer96internaltype,
    author = {Peter Dybjer},
    title = {Internal Type Theory},
    booktitle = {Lecture Notes in Computer Science},
    year = {1996},
    pages = {120--134},
    publisher = {Springer}}
    
@Unpublished{brunerie,
  author = 	 {Guillaume Brunerie},
  title = 	 {A formalization of the initiality conjecture in Agda},
  note = 	 {Slides of a talk at the Homotopy Type Theory 2019 Conference, Carnegie Mellon University, Pittsburgh, Pennsylvania},
  month =	 {August},
  year =	 {2019},
  url = {https://guillaumebrunerie.github.io/pdf/initiality.pdf},
}
@INPROCEEDINGS{types,
    title = {Closed Inductive-Inductive Types are Reducible to Indexed Inductive Types},
    author = {Ambrus Kaposi and Andr{\'a}s Kov{\'a}cs and Ambroise Lafont},
    year = {2019},
    booktitle = {25th International Conference on Types for Proofs and Programs, TYPES 2019},
    editor = {Marc Bezem},
    publisher = {Centre for Advanced Study at the Norwegian Academy of Science and Letters},
    comment = {Abstract}
}
@inproceedings{nisse,
  added-at = {2010-08-25T08:47:38.000+0200},
  author = {Danielsson, Nils Anders},
  bibsource = {{DBLP, http://dblp.uni-trier.de}},
  biburl = {http://www.bibsonomy.org/bibtex/21dbe1359542e438b07af57ec0588a346/miguel.pagano},
  booktitle = {{TYPES}},
  crossref = {DBLP:conf/types/2006},
  ee = {{http://dx.doi.org/10.1007/978-3-540-74464-1_7}},
  interhash = {be7a1c39d076a92f52af28ea9fef0629},
  intrahash = {1dbe1359542e438b07af57ec0588a346},
  keywords = {imported},
  pages = {93-109},
  printed = {{TT}},
  timestamp = {2010-08-25T08:47:43.000+0200},
  title = {A Formalisation of a Dependently Typed Language as an Inductive-Recursive Family},
  year = {{2006}}
}
@proceedings{DBLP:conf/types/2006,
  editor    = {Thorsten Altenkirch and
               Conor McBride},
  title     = {Types for Proofs and Programs, International Workshop, {TYPES} 2006,
               Nottingham, UK, April 18-21, 2006, Revised Selected Papers},
  series    = {Lecture Notes in Computer Science},
  volume    = {4502},
  publisher = {Springer},
  year      = {2007},
  isbn      = {978-3-540-74463-4},
  timestamp = {Mon, 17 Sep 2007 12:52:22 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/types/2006},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
@inproceedings{Altenkirch:2014:CO:2631172.2631176,
 author = {Altenkirch, Thorsten and Li, Nuo and Ryp\'{a}\v{c}ek, Ond\v{r}ej},
 title = {Some Constructions on {$\Omega$}-groupoids},
 booktitle = {Proceedings of the 2014 International Workshop on Logical Frameworks and Meta-languages: Theory and Practice},
 series = {LFMTP '14},
 year = {2014},
 isbn = {978-1-4503-2817-3},
 location = {Vienna, Austria},
 pages = {4:1--4:8},
 articleno = {4},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/2631172.2631176},
 doi = {10.1145/2631172.2631176},
 acmid = {2631176},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Agda, Category Theory, Formalisation, Higher dimensional structures, Homotopy Type Theory, Type Theory},
}
@INPROCEEDINGS{erasure,
    title = {Constructing Inductive-Inductive Types via Type Erasure},
    author = {Thorsten Altenkirch and Ambrus Kaposi and Andr{\'a}s Kov{\'a}cs and Jakob von Raumer},
    year = {2019},
    booktitle = {25th International Conference on Types for Proofs and Programs, TYPES 2019},
    editor = {Marc Bezem},
    publisher = {Centre for Advanced Study at the Norwegian Academy of Science and Letters},
    comment = {Abstract}
}
@MISC{malatasta13smallir,
    author = {Lorenzo Malatesta and Thorsten Altenkirch and Neil Ghani and Peter Hancock and Conor McBride},
    title = {Small Induction Recursion, Indexed Containers and Dependent Polynomials are equivalent},
    year = {2013},
    note = {TLCA 2013}
}
@article{gat,
  title={Generalised algebraic theories and contextual categories},
  author={Cartmell, John},
  journal={Annals of Pure and Applied Logic},
  volume={32},
  pages={209--243},
  year={1986},
  publisher={Elsevier}
}
@article{indexedcont,
  author    = {Thorsten Altenkirch and
               Neil Ghani and
               Peter Hancock and
               Conor McBride and
               Peter Morris},
  title     = {Indexed containers},
  journal   = {J. Funct. Program.},
  volume    = {25},
  year      = {2015},
  url       = {http://dx.doi.org/10.1017/S095679681500009X},
  doi       = {10.1017/S095679681500009X},
  timestamp = {Tue, 26 Jan 2016 16:08:20 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/journals/jfp/AltenkirchGHMM15},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
@Unpublished{mutual,
  author = 	 {Ambrus Kaposi and Jakob von Raumer},
  title = 	 {A Syntax for Mutual Inductive Families },
  month =	 {October},
  year =	 {2019},
  note =	 {Unpublished draft},
  url = {https://bitbucket.org/javra/inductive-families/raw/master/main.pdf},
}
@Article{Ahrens2019,
author="Ahrens, Benedikt
and Matthes, Ralph
and M{\"o}rtberg, Anders",
title="From Signatures to Monads in UniMath",
journal="Journal of Automated Reasoning",
year="2019",
month="Aug",
day="01",
volume="63",
number="2",
pages="285--318",
abstract="The term UniMath refers both to a formal system for mathematics, as well as a computer-checked library of mathematics formalized in that system. The UniMath system is a core dependent type theory, augmented by the univalence axiom. The system is kept as small as possible in order to ease verification of it---in particular, general inductive types are not part of the system. In this work, we partially remedy the lack of inductive types by constructing some set-level datatypes and their associated induction principles from other type constructors. This involves a formalization of a category-theoretic result on the construction of initial algebras, as well as a mechanism to conveniently use the datatypes obtained. We also connect this construction to a previous formalization of substitution for languages with variable binding. Altogether, we construct a framework that allows us to concisely specify, via a simple notion of binding signature, a language with variable binding. From such a specification we obtain the datatype of terms of that language, equipped with a certified monadic substitution operation and a suitable recursion scheme. Using this we formalize the untyped lambda calculus and the raw syntax of Martin-L{\"o}f type theory.",
issn="1573-0670",
doi="10.1007/s10817-018-9474-4",
url="https://doi.org/10.1007/s10817-018-9474-4"
}

